import streamlit as st
import fitz
import json, datetime
from utils import find_metrics, risks, score

st.set_page_config(page_title="AI Analyst (Prototype)", layout="wide")
st.title("AI Analyst for Startup Evaluation — Minimal Prototype")
st.caption("Upload a pitch deck PDF, extract signals, flag risks, score, and generate an investor-ready note.")

uploaded = st.file_uploader("Upload pitch deck (PDF)", type=["pdf"])
weights_col, main_col = st.columns([1,2])

with weights_col:
    st.subheader("Weights")
    team_w = st.slider("Team (display only)", 0, 40, 25, 1)
    st.write("Risk penalty: 5 points per flag (max 20).")


if uploaded:
    doc = fitz.open(stream=uploaded.read(), filetype="pdf")
    text = ""
    for page in doc:
        text += page.get_text()
    st.success(f"Parsed {doc.page_count} pages.")
    first = text.splitlines()[0].strip() if text.strip() else ""
    company = st.text_input("Company", first if len(first) < 60 else "")
    sector = st.text_input("Sector", "")
    stage = st.selectbox("Stage", ["Pre-seed","Seed","Series A","Series B+"], index=1)
    metrics = find_metrics(text)
    st.subheader("Extracted metrics")
    st.json(metrics if metrics else [{"info":"No obvious metrics found. Add them manually below."}])
    add_metric = st.text_input("Add metric (e.g., $50k MRR)")
    if add_metric: metrics.append({"name":"CUSTOM","value":add_metric, "evidence":""})
    flags = risks(text, metrics)
    st.subheader("Risk flags")
    for f in flags:
        with st.expander(f"⚠️ {f['type']}: {f['message']}"):
            st.write(f.get("evidence",""))
    overall, subscores = score({"team": team_w}, metrics, flags)
    st.metric("Overall score", overall)
    st.write("Subscores", subscores)
    data = {"company": company, "sector": sector, "stage": stage, "summary": "", "metrics": metrics, "risks": flags, "score": {"overall": overall, **subscores}, "recommendation": "proceed" if overall >= 70 else ("monitor" if overall >= 55 else "pass")}
    st.subheader("Structured JSON")
    st.code(json.dumps(data, indent=2))
    st.subheader("Investor Note")
    note = f"""# {company or 'Company'} — Investment Note

**Stage:** {stage} | **Sector:** {sector or '—'} | **Score:** {overall}/100

## Summary
This note was generated by a rules‑based prototype that parses the uploaded deck and applies a simple rubric.

## Signals / Metrics
""" 
    for m in metrics:
        note += f"- {m['name']}: {m['value']}"
        if m.get("evidence"): note += f"  \n  _Evidence:_ {m['evidence'][:160]}…"
        note += "\n"
    note += "\n## Risks\n"
    if flags:
        for f in flags:
            ev = f.get("evidence","");
            note += f"- **{f['type']}** — {f['message']}" + (f"  \n  _Evidence:_ {ev[:160]}…" if ev else "") + "\n"
    else:
        note += "- None detected by baseline rules.\n"
    note += f"""\n## Recommendation
**{data['recommendation'].upper()}** (confidence: baseline).

---
_Generated: {datetime.datetime.utcnow().isoformat()}Z_
"""
    st.markdown(note)
    st.download_button("Download note (.md)", data=note.encode("utf-8"), file_name=f"{company or 'company'}_note.md")
else:
    st.info("Upload a sample pitch deck PDF to get started.")
